/*
 * This file is generated by jOOQ.
*/
package com.brook.example.jooq.tables;


import com.brook.example.jooq.CaishenBackstage;
import com.brook.example.jooq.Indexes;
import com.brook.example.jooq.Keys;
import com.brook.example.jooq.tables.records.MockUserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MockUser extends TableImpl<MockUserRecord> {

    private static final long serialVersionUID = 291207333;

    /**
     * The reference instance of <code>caishen_backstage.mock_user</code>
     */
    public static final MockUser MOCK_USER = new MockUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MockUserRecord> getRecordType() {
        return MockUserRecord.class;
    }

    /**
     * The column <code>caishen_backstage.mock_user.id</code>. id
     */
    public final TableField<MockUserRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "id");

    /**
     * The column <code>caishen_backstage.mock_user.user_id</code>. userid
     */
    public final TableField<MockUserRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "userid");

    /**
     * The column <code>caishen_backstage.mock_user.user_code</code>. user_code
     */
    public final TableField<MockUserRecord, Long> USER_CODE = createField("user_code", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "user_code");

    /**
     * The column <code>caishen_backstage.mock_user.mobile_num</code>. 手机号
     */
    public final TableField<MockUserRecord, String> MOBILE_NUM = createField("mobile_num", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "手机号");

    /**
     * The column <code>caishen_backstage.mock_user.real_name</code>. 真实姓名
     */
    public final TableField<MockUserRecord, String> REAL_NAME = createField("real_name", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "真实姓名");

    /**
     * The column <code>caishen_backstage.mock_user.id_num</code>. 身份证号
     */
    public final TableField<MockUserRecord, String> ID_NUM = createField("id_num", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "身份证号");

    /**
     * The column <code>caishen_backstage.mock_user.bank_no</code>. 银行卡
     */
    public final TableField<MockUserRecord, String> BANK_NO = createField("bank_no", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "银行卡");

    /**
     * The column <code>caishen_backstage.mock_user.update_time</code>. 创建时间
     */
    public final TableField<MockUserRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>caishen_backstage.mock_user.create_time</code>. 创建时间
     */
    public final TableField<MockUserRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>caishen_backstage.mock_user.is_delete</code>. 是否删除
     */
    public final TableField<MockUserRecord, String> IS_DELETE = createField("is_delete", org.jooq.impl.SQLDataType.CHAR(2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.CHAR)), this, "是否删除");

    /**
     * Create a <code>caishen_backstage.mock_user</code> table reference
     */
    public MockUser() {
        this(DSL.name("mock_user"), null);
    }

    /**
     * Create an aliased <code>caishen_backstage.mock_user</code> table reference
     */
    public MockUser(String alias) {
        this(DSL.name(alias), MOCK_USER);
    }

    /**
     * Create an aliased <code>caishen_backstage.mock_user</code> table reference
     */
    public MockUser(Name alias) {
        this(alias, MOCK_USER);
    }

    private MockUser(Name alias, Table<MockUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private MockUser(Name alias, Table<MockUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CaishenBackstage.CAISHEN_BACKSTAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MOCK_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MockUserRecord, Long> getIdentity() {
        return Keys.IDENTITY_MOCK_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MockUserRecord> getPrimaryKey() {
        return Keys.KEY_MOCK_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MockUserRecord>> getKeys() {
        return Arrays.<UniqueKey<MockUserRecord>>asList(Keys.KEY_MOCK_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MockUser as(String alias) {
        return new MockUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MockUser as(Name alias) {
        return new MockUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MockUser rename(String name) {
        return new MockUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MockUser rename(Name name) {
        return new MockUser(name, null);
    }
}
