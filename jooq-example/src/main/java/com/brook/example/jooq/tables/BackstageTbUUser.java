/*
 * This file is generated by jOOQ.
*/
package com.brook.example.jooq.tables;


import com.brook.example.jooq.CaishenBackstage;
import com.brook.example.jooq.Indexes;
import com.brook.example.jooq.Keys;
import com.brook.example.jooq.tables.records.BackstageTbUUserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BackstageTbUUser extends TableImpl<BackstageTbUUserRecord> {

    private static final long serialVersionUID = 1407674194;

    /**
     * The reference instance of <code>caishen_backstage.backstage_tb_u_user</code>
     */
    public static final BackstageTbUUser BACKSTAGE_TB_U_USER = new BackstageTbUUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BackstageTbUUserRecord> getRecordType() {
        return BackstageTbUUserRecord.class;
    }

    /**
     * The column <code>caishen_backstage.backstage_tb_u_user.u_id</code>.
     */
    public final TableField<BackstageTbUUserRecord, Integer> U_ID = createField("u_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>caishen_backstage.backstage_tb_u_user.u_login_name</code>. 用户名
     */
    public final TableField<BackstageTbUUserRecord, String> U_LOGIN_NAME = createField("u_login_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "用户名");

    /**
     * The column <code>caishen_backstage.backstage_tb_u_user.u_password</code>. 密码
     */
    public final TableField<BackstageTbUUserRecord, String> U_PASSWORD = createField("u_password", org.jooq.impl.SQLDataType.VARCHAR(255), this, "密码");

    /**
     * The column <code>caishen_backstage.backstage_tb_u_user.u_email</code>. 邮箱
     */
    public final TableField<BackstageTbUUserRecord, String> U_EMAIL = createField("u_email", org.jooq.impl.SQLDataType.VARCHAR(255), this, "邮箱");

    /**
     * The column <code>caishen_backstage.backstage_tb_u_user.u_mobile</code>. 手机号
     */
    public final TableField<BackstageTbUUserRecord, String> U_MOBILE = createField("u_mobile", org.jooq.impl.SQLDataType.VARCHAR(255), this, "手机号");

    /**
     * The column <code>caishen_backstage.backstage_tb_u_user.u_status</code>. 状态
     */
    public final TableField<BackstageTbUUserRecord, Integer> U_STATUS = createField("u_status", org.jooq.impl.SQLDataType.INTEGER, this, "状态");

    /**
     * The column <code>caishen_backstage.backstage_tb_u_user.u_gen_time</code>. 创建时间
     */
    public final TableField<BackstageTbUUserRecord, String> U_GEN_TIME = createField("u_gen_time", org.jooq.impl.SQLDataType.VARCHAR(255), this, "创建时间");

    /**
     * Create a <code>caishen_backstage.backstage_tb_u_user</code> table reference
     */
    public BackstageTbUUser() {
        this(DSL.name("backstage_tb_u_user"), null);
    }

    /**
     * Create an aliased <code>caishen_backstage.backstage_tb_u_user</code> table reference
     */
    public BackstageTbUUser(String alias) {
        this(DSL.name(alias), BACKSTAGE_TB_U_USER);
    }

    /**
     * Create an aliased <code>caishen_backstage.backstage_tb_u_user</code> table reference
     */
    public BackstageTbUUser(Name alias) {
        this(alias, BACKSTAGE_TB_U_USER);
    }

    private BackstageTbUUser(Name alias, Table<BackstageTbUUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private BackstageTbUUser(Name alias, Table<BackstageTbUUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CaishenBackstage.CAISHEN_BACKSTAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BACKSTAGE_TB_U_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BackstageTbUUserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BACKSTAGE_TB_U_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BackstageTbUUserRecord> getPrimaryKey() {
        return Keys.KEY_BACKSTAGE_TB_U_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BackstageTbUUserRecord>> getKeys() {
        return Arrays.<UniqueKey<BackstageTbUUserRecord>>asList(Keys.KEY_BACKSTAGE_TB_U_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BackstageTbUUser as(String alias) {
        return new BackstageTbUUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BackstageTbUUser as(Name alias) {
        return new BackstageTbUUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BackstageTbUUser rename(String name) {
        return new BackstageTbUUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BackstageTbUUser rename(Name name) {
        return new BackstageTbUUser(name, null);
    }
}
