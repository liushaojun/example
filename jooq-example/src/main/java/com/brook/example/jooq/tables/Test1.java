/*
 * This file is generated by jOOQ.
*/
package com.brook.example.jooq.tables;


import com.brook.example.jooq.CaishenBackstage;
import com.brook.example.jooq.Indexes;
import com.brook.example.jooq.Keys;
import com.brook.example.jooq.tables.records.Test1Record;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Test1 extends TableImpl<Test1Record> {

    private static final long serialVersionUID = -81299874;

    /**
     * The reference instance of <code>caishen_backstage.test1</code>
     */
    public static final Test1 TEST1 = new Test1();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Test1Record> getRecordType() {
        return Test1Record.class;
    }

    /**
     * The column <code>caishen_backstage.test1.id</code>.
     */
    public final TableField<Test1Record, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>caishen_backstage.test1.name</code>.
     */
    public final TableField<Test1Record, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * Create a <code>caishen_backstage.test1</code> table reference
     */
    public Test1() {
        this(DSL.name("test1"), null);
    }

    /**
     * Create an aliased <code>caishen_backstage.test1</code> table reference
     */
    public Test1(String alias) {
        this(DSL.name(alias), TEST1);
    }

    /**
     * Create an aliased <code>caishen_backstage.test1</code> table reference
     */
    public Test1(Name alias) {
        this(alias, TEST1);
    }

    private Test1(Name alias, Table<Test1Record> aliased) {
        this(alias, aliased, null);
    }

    private Test1(Name alias, Table<Test1Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CaishenBackstage.CAISHEN_BACKSTAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEST1_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Test1Record> getPrimaryKey() {
        return Keys.KEY_TEST1_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Test1Record>> getKeys() {
        return Arrays.<UniqueKey<Test1Record>>asList(Keys.KEY_TEST1_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Test1 as(String alias) {
        return new Test1(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Test1 as(Name alias) {
        return new Test1(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Test1 rename(String name) {
        return new Test1(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Test1 rename(Name name) {
        return new Test1(name, null);
    }
}
