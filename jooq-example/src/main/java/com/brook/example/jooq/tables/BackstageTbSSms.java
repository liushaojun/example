/*
 * This file is generated by jOOQ.
*/
package com.brook.example.jooq.tables;


import com.brook.example.jooq.CaishenBackstage;
import com.brook.example.jooq.Indexes;
import com.brook.example.jooq.Keys;
import com.brook.example.jooq.tables.records.BackstageTbSSmsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BackstageTbSSms extends TableImpl<BackstageTbSSmsRecord> {

    private static final long serialVersionUID = -125091268;

    /**
     * The reference instance of <code>caishen_backstage.backstage_tb_s_sms</code>
     */
    public static final BackstageTbSSms BACKSTAGE_TB_S_SMS = new BackstageTbSSms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BackstageTbSSmsRecord> getRecordType() {
        return BackstageTbSSmsRecord.class;
    }

    /**
     * The column <code>caishen_backstage.backstage_tb_s_sms.ss_id</code>.
     */
    public final TableField<BackstageTbSSmsRecord, Integer> SS_ID = createField("ss_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>caishen_backstage.backstage_tb_s_sms.ss_sms_name</code>. 要发送的短信内容
     */
    public final TableField<BackstageTbSSmsRecord, String> SS_SMS_NAME = createField("ss_sms_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "要发送的短信内容");

    /**
     * The column <code>caishen_backstage.backstage_tb_s_sms.ss_gen_time</code>. 创建时间
     */
    public final TableField<BackstageTbSSmsRecord, String> SS_GEN_TIME = createField("ss_gen_time", org.jooq.impl.SQLDataType.VARCHAR(255), this, "创建时间");

    /**
     * The column <code>caishen_backstage.backstage_tb_s_sms.ss_update_time</code>. 更新时间
     */
    public final TableField<BackstageTbSSmsRecord, String> SS_UPDATE_TIME = createField("ss_update_time", org.jooq.impl.SQLDataType.VARCHAR(255), this, "更新时间");

    /**
     * The column <code>caishen_backstage.backstage_tb_s_sms.ss_status</code>.
     */
    public final TableField<BackstageTbSSmsRecord, Integer> SS_STATUS = createField("ss_status", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>caishen_backstage.backstage_tb_s_sms.sms_type_id</code>. 短信类型外键
     */
    public final TableField<BackstageTbSSmsRecord, Integer> SMS_TYPE_ID = createField("sms_type_id", org.jooq.impl.SQLDataType.INTEGER, this, "短信类型外键");

    /**
     * Create a <code>caishen_backstage.backstage_tb_s_sms</code> table reference
     */
    public BackstageTbSSms() {
        this(DSL.name("backstage_tb_s_sms"), null);
    }

    /**
     * Create an aliased <code>caishen_backstage.backstage_tb_s_sms</code> table reference
     */
    public BackstageTbSSms(String alias) {
        this(DSL.name(alias), BACKSTAGE_TB_S_SMS);
    }

    /**
     * Create an aliased <code>caishen_backstage.backstage_tb_s_sms</code> table reference
     */
    public BackstageTbSSms(Name alias) {
        this(alias, BACKSTAGE_TB_S_SMS);
    }

    private BackstageTbSSms(Name alias, Table<BackstageTbSSmsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BackstageTbSSms(Name alias, Table<BackstageTbSSmsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CaishenBackstage.CAISHEN_BACKSTAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BACKSTAGE_TB_S_SMS_FK_SMS_TYPE_ID, Indexes.BACKSTAGE_TB_S_SMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BackstageTbSSmsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BACKSTAGE_TB_S_SMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BackstageTbSSmsRecord> getPrimaryKey() {
        return Keys.KEY_BACKSTAGE_TB_S_SMS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BackstageTbSSmsRecord>> getKeys() {
        return Arrays.<UniqueKey<BackstageTbSSmsRecord>>asList(Keys.KEY_BACKSTAGE_TB_S_SMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BackstageTbSSmsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BackstageTbSSmsRecord, ?>>asList(Keys.FK_SMS_TYPE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BackstageTbSSms as(String alias) {
        return new BackstageTbSSms(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BackstageTbSSms as(Name alias) {
        return new BackstageTbSSms(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BackstageTbSSms rename(String name) {
        return new BackstageTbSSms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BackstageTbSSms rename(Name name) {
        return new BackstageTbSSms(name, null);
    }
}
