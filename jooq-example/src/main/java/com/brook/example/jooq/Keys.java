/*
 * This file is generated by jOOQ.
*/
package com.brook.example.jooq;


import com.brook.example.jooq.tables.BackstageTbMessageLog;
import com.brook.example.jooq.tables.BackstageTbSSms;
import com.brook.example.jooq.tables.BackstageTbSSmsType;
import com.brook.example.jooq.tables.BackstageTbUOperatingLog;
import com.brook.example.jooq.tables.BackstageTbUUser;
import com.brook.example.jooq.tables.MenuInfo;
import com.brook.example.jooq.tables.MockUser;
import com.brook.example.jooq.tables.MonitorInfo;
import com.brook.example.jooq.tables.Test1;
import com.brook.example.jooq.tables.UserMenu;
import com.brook.example.jooq.tables.records.BackstageTbMessageLogRecord;
import com.brook.example.jooq.tables.records.BackstageTbSSmsRecord;
import com.brook.example.jooq.tables.records.BackstageTbSSmsTypeRecord;
import com.brook.example.jooq.tables.records.BackstageTbUOperatingLogRecord;
import com.brook.example.jooq.tables.records.BackstageTbUUserRecord;
import com.brook.example.jooq.tables.records.MenuInfoRecord;
import com.brook.example.jooq.tables.records.MockUserRecord;
import com.brook.example.jooq.tables.records.MonitorInfoRecord;
import com.brook.example.jooq.tables.records.Test1Record;
import com.brook.example.jooq.tables.records.UserMenuRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>caishen_backstage</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<BackstageTbMessageLogRecord, Integer> IDENTITY_BACKSTAGE_TB_MESSAGE_LOG = Identities0.IDENTITY_BACKSTAGE_TB_MESSAGE_LOG;
    public static final Identity<BackstageTbSSmsRecord, Integer> IDENTITY_BACKSTAGE_TB_S_SMS = Identities0.IDENTITY_BACKSTAGE_TB_S_SMS;
    public static final Identity<BackstageTbUOperatingLogRecord, Integer> IDENTITY_BACKSTAGE_TB_U_OPERATING_LOG = Identities0.IDENTITY_BACKSTAGE_TB_U_OPERATING_LOG;
    public static final Identity<BackstageTbUUserRecord, Integer> IDENTITY_BACKSTAGE_TB_U_USER = Identities0.IDENTITY_BACKSTAGE_TB_U_USER;
    public static final Identity<MenuInfoRecord, Integer> IDENTITY_MENU_INFO = Identities0.IDENTITY_MENU_INFO;
    public static final Identity<MockUserRecord, Long> IDENTITY_MOCK_USER = Identities0.IDENTITY_MOCK_USER;
    public static final Identity<MonitorInfoRecord, Long> IDENTITY_MONITOR_INFO = Identities0.IDENTITY_MONITOR_INFO;
    public static final Identity<UserMenuRecord, Integer> IDENTITY_USER_MENU = Identities0.IDENTITY_USER_MENU;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BackstageTbMessageLogRecord> KEY_BACKSTAGE_TB_MESSAGE_LOG_PRIMARY = UniqueKeys0.KEY_BACKSTAGE_TB_MESSAGE_LOG_PRIMARY;
    public static final UniqueKey<BackstageTbSSmsRecord> KEY_BACKSTAGE_TB_S_SMS_PRIMARY = UniqueKeys0.KEY_BACKSTAGE_TB_S_SMS_PRIMARY;
    public static final UniqueKey<BackstageTbSSmsTypeRecord> KEY_BACKSTAGE_TB_S_SMS_TYPE_PRIMARY = UniqueKeys0.KEY_BACKSTAGE_TB_S_SMS_TYPE_PRIMARY;
    public static final UniqueKey<BackstageTbUOperatingLogRecord> KEY_BACKSTAGE_TB_U_OPERATING_LOG_PRIMARY = UniqueKeys0.KEY_BACKSTAGE_TB_U_OPERATING_LOG_PRIMARY;
    public static final UniqueKey<BackstageTbUUserRecord> KEY_BACKSTAGE_TB_U_USER_PRIMARY = UniqueKeys0.KEY_BACKSTAGE_TB_U_USER_PRIMARY;
    public static final UniqueKey<MenuInfoRecord> KEY_MENU_INFO_PRIMARY = UniqueKeys0.KEY_MENU_INFO_PRIMARY;
    public static final UniqueKey<MockUserRecord> KEY_MOCK_USER_PRIMARY = UniqueKeys0.KEY_MOCK_USER_PRIMARY;
    public static final UniqueKey<MonitorInfoRecord> KEY_MONITOR_INFO_PRIMARY = UniqueKeys0.KEY_MONITOR_INFO_PRIMARY;
    public static final UniqueKey<Test1Record> KEY_TEST1_PRIMARY = UniqueKeys0.KEY_TEST1_PRIMARY;
    public static final UniqueKey<UserMenuRecord> KEY_USER_MENU_PRIMARY = UniqueKeys0.KEY_USER_MENU_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BackstageTbSSmsRecord, BackstageTbSSmsTypeRecord> FK_SMS_TYPE_ID = ForeignKeys0.FK_SMS_TYPE_ID;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<BackstageTbMessageLogRecord, Integer> IDENTITY_BACKSTAGE_TB_MESSAGE_LOG = createIdentity(BackstageTbMessageLog.BACKSTAGE_TB_MESSAGE_LOG, BackstageTbMessageLog.BACKSTAGE_TB_MESSAGE_LOG.ID);
        public static Identity<BackstageTbSSmsRecord, Integer> IDENTITY_BACKSTAGE_TB_S_SMS = createIdentity(BackstageTbSSms.BACKSTAGE_TB_S_SMS, BackstageTbSSms.BACKSTAGE_TB_S_SMS.SS_ID);
        public static Identity<BackstageTbUOperatingLogRecord, Integer> IDENTITY_BACKSTAGE_TB_U_OPERATING_LOG = createIdentity(BackstageTbUOperatingLog.BACKSTAGE_TB_U_OPERATING_LOG, BackstageTbUOperatingLog.BACKSTAGE_TB_U_OPERATING_LOG.OP_ID);
        public static Identity<BackstageTbUUserRecord, Integer> IDENTITY_BACKSTAGE_TB_U_USER = createIdentity(BackstageTbUUser.BACKSTAGE_TB_U_USER, BackstageTbUUser.BACKSTAGE_TB_U_USER.U_ID);
        public static Identity<MenuInfoRecord, Integer> IDENTITY_MENU_INFO = createIdentity(MenuInfo.MENU_INFO, MenuInfo.MENU_INFO.ID);
        public static Identity<MockUserRecord, Long> IDENTITY_MOCK_USER = createIdentity(MockUser.MOCK_USER, MockUser.MOCK_USER.ID);
        public static Identity<MonitorInfoRecord, Long> IDENTITY_MONITOR_INFO = createIdentity(MonitorInfo.MONITOR_INFO, MonitorInfo.MONITOR_INFO.ID);
        public static Identity<UserMenuRecord, Integer> IDENTITY_USER_MENU = createIdentity(UserMenu.USER_MENU, UserMenu.USER_MENU.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<BackstageTbMessageLogRecord> KEY_BACKSTAGE_TB_MESSAGE_LOG_PRIMARY = createUniqueKey(BackstageTbMessageLog.BACKSTAGE_TB_MESSAGE_LOG, "KEY_backstage_tb_message_log_PRIMARY", BackstageTbMessageLog.BACKSTAGE_TB_MESSAGE_LOG.ID);
        public static final UniqueKey<BackstageTbSSmsRecord> KEY_BACKSTAGE_TB_S_SMS_PRIMARY = createUniqueKey(BackstageTbSSms.BACKSTAGE_TB_S_SMS, "KEY_backstage_tb_s_sms_PRIMARY", BackstageTbSSms.BACKSTAGE_TB_S_SMS.SS_ID);
        public static final UniqueKey<BackstageTbSSmsTypeRecord> KEY_BACKSTAGE_TB_S_SMS_TYPE_PRIMARY = createUniqueKey(BackstageTbSSmsType.BACKSTAGE_TB_S_SMS_TYPE, "KEY_backstage_tb_s_sms_type_PRIMARY", BackstageTbSSmsType.BACKSTAGE_TB_S_SMS_TYPE.ST_ID);
        public static final UniqueKey<BackstageTbUOperatingLogRecord> KEY_BACKSTAGE_TB_U_OPERATING_LOG_PRIMARY = createUniqueKey(BackstageTbUOperatingLog.BACKSTAGE_TB_U_OPERATING_LOG, "KEY_backstage_tb_u_operating_log_PRIMARY", BackstageTbUOperatingLog.BACKSTAGE_TB_U_OPERATING_LOG.OP_ID);
        public static final UniqueKey<BackstageTbUUserRecord> KEY_BACKSTAGE_TB_U_USER_PRIMARY = createUniqueKey(BackstageTbUUser.BACKSTAGE_TB_U_USER, "KEY_backstage_tb_u_user_PRIMARY", BackstageTbUUser.BACKSTAGE_TB_U_USER.U_ID);
        public static final UniqueKey<MenuInfoRecord> KEY_MENU_INFO_PRIMARY = createUniqueKey(MenuInfo.MENU_INFO, "KEY_menu_info_PRIMARY", MenuInfo.MENU_INFO.ID);
        public static final UniqueKey<MockUserRecord> KEY_MOCK_USER_PRIMARY = createUniqueKey(MockUser.MOCK_USER, "KEY_mock_user_PRIMARY", MockUser.MOCK_USER.ID);
        public static final UniqueKey<MonitorInfoRecord> KEY_MONITOR_INFO_PRIMARY = createUniqueKey(MonitorInfo.MONITOR_INFO, "KEY_monitor_info_PRIMARY", MonitorInfo.MONITOR_INFO.ID);
        public static final UniqueKey<Test1Record> KEY_TEST1_PRIMARY = createUniqueKey(Test1.TEST1, "KEY_test1_PRIMARY", Test1.TEST1.ID);
        public static final UniqueKey<UserMenuRecord> KEY_USER_MENU_PRIMARY = createUniqueKey(UserMenu.USER_MENU, "KEY_user_menu_PRIMARY", UserMenu.USER_MENU.ID);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<BackstageTbSSmsRecord, BackstageTbSSmsTypeRecord> FK_SMS_TYPE_ID = createForeignKey(com.brook.example.jooq.Keys.KEY_BACKSTAGE_TB_S_SMS_TYPE_PRIMARY, BackstageTbSSms.BACKSTAGE_TB_S_SMS, "fk_sms_type_id", BackstageTbSSms.BACKSTAGE_TB_S_SMS.SMS_TYPE_ID);
    }
}
